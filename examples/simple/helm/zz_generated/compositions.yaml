metadata:
  name: xs3buckets.simple.cuefn.example.com
  labels:
    crossplane.io/xrd: xs3buckets.simple.cuefn.example.com
spec:
  compositeTypeRef:
    apiVersion: simple.cuefn.example.com/v1alpha1
    kind: XS3Bucket
  mode: Pipeline
  resources: []
  pipeline:
    - step: run cue composition
      functionRef:
        name: fn-cue-examples-simple
      input:
        spec:
          source: Inline
          script: |
            package s3bucket

            import (
            	"list"
            	"encoding/json"
            )

            let endpoints0 = [
            	for s in _suffixes {
            		let bucketName_1 = "bucket\(s)"
            		[
            			if _request.observed.resources[bucketName_1].resource.status.atProvider.bucketRegionalDomainName != _|_ // explicit error (_|_ literal) in source
            			{
            				_request.observed.resources[bucketName_1].resource.status.atProvider.bucketRegionalDomainName
            			}, "unknown"][0]
            	}]
            let endpoints1 = [for e in endpoints0 if e != "unknown" {
            	e
            }]
            let mainARN = _request.observed.resources.main.resource.status.atProvider.arn
            let baseARN = [
            	if mainARN != _|_ // explicit error (_|_ literal) in source
            	{
            		mainARN
            	}, "unknown"][0]
            let arns = [
            	for s in _suffixes {
            		let bucketName_2 = "bucket\(s)"
            		let arn_1 = _request.observed.resources[bucketName_2].resource.status.atProvider.arn
            		[
            			if arn_1 != _|_ // explicit error (_|_ literal) in source
            			{
            				arn_1
            			}, "unknown"][0]
            	}]
            let additionalARNs = [for e in arns if e != "unknown" {
            	e
            }]
            let p = _request.observed.resources.main.resource.status.atProvider.bucketRegionalDomainName
            {
            	resources: {
            		for s in _suffixes {
            			let bucketName = "bucket\(s)"
            			(bucketName): resource: {
            				apiVersion: "s3.aws.upbound.io/v1beta1"
            				kind:       "Bucket"
            				metadata: name: "\(_compName)\(s)"
            				spec: forProvider: {
            					forceDestroy: true
            					region:       _spec.parameters.region
            					tags:         _tags
            				}
            			}
            		}
            	}

            	// only render additional endpoints if all of them are available since it is an ordered list
            	// that matches the suffix list
            	if len(endpoints1) == len(_suffixes) && len(_suffixes) > 0 {
            		composite: resource: status: additionalEndpoints: endpoints1
            	}
            }
            {
            	// if we have a base ARN, render a policy with that and any additional ARNs available.
            	if baseARN != "unknown" {
            		let allTuples = list.Concat([[baseARN, baseARN + "/*"], [
            			for a in additionalARNs {
            				[a, a + "/*"]
            			}]])
            		let allResources = list.FlattenN(allTuples, 1)
            		resources: iam_policy: resource: {
            			apiVersion: "iam.aws.upbound.io/v1beta1"
            			kind:       "Policy"
            			metadata: name: "\(_compName)-access-policy"
            			spec: forProvider: {
            				path: "/"
            				policy: json.Marshal({
            					Version: "2012-10-17"
            					Statement: [{
            						Sid: "S3BucketAccess"
            						Action: ["s3:GetObject", "s3:PutObject"]
            						Effect:   "Allow"
            						Resource: allResources
            					}]
            				})
            			}
            		}
            	}
            	{
            		let policyARN = _request.observed.resources.iam_policy.resource.status.atProvider.arn
            		if policyARN != _|_ // explicit error (_|_ literal) in source
            		{
            			composite: resource: status: iamPolicyARN: policyARN
            		}
            	}
            }
            {
            	if p != _|_ // explicit error (_|_ literal) in source
            	{
            		composite: resource: status: primaryEndpoint: p
            	}
            }

            // responses should be generated based on the _request object. The variable below declares it as an open struct
            // so that it can be referenced in expressions.
            _request: {
            	...
            }

            // create some hidden fields for easy access to nested JSON paths and provide defaults
            _composite: _request.observed.composite.resource
            _compName:  _composite.metadata.name
            _spec:      _composite.spec
            _tags:      [
            		if _composite.spec.parameters.tags != _|_ // explicit error (_|_ literal) in source
            		{
            		_composite.spec.parameters.tags
            	}, {}][0]
            resources: main: resource: {
            	apiVersion: "s3.aws.upbound.io/v1beta1"
            	kind:       "Bucket"
            	metadata: name: _compName
            	spec: forProvider: {
            		forceDestroy: true
            		region:       _spec.parameters.region
            		tags:         _tags
            	}
            }
            _suffixes: [
            		if _spec.parameters.additionalSuffixes != _|_ // explicit error (_|_ literal) in source
            		{
            		_spec.parameters.additionalSuffixes
            	}, []][0]
          debugNew: true
        kind: CueFunctionInput
        apiVersion: function-cue/v1
    - step: run auto ready
      functionRef:
        name: fn-auto-ready
kind: Composition
apiVersion: apiextensions.crossplane.io/v1

---
