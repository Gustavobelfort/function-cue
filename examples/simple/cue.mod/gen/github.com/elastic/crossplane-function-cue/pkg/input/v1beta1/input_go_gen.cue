// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/elastic/crossplane-function-cue/pkg/input/v1beta1

// Package v1beta1 contains the input type for the cue function runner.
// +kubebuilder:object:generate=true
// +groupName=cue.fn.crossplane.io
// +versionName=v1beta1
package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// A ScriptSource is a source from which a script can be loaded.
#ScriptSource: string // #enumScriptSource

#enumScriptSource:
	#ScriptSourceInline

// ScriptSourceInline specifies a script inline.
#ScriptSourceInline: #ScriptSource & "Inline"

// CueInputSpec is the spec for running a cue script.
#CueInputSpec: {
	// Source of this script. Currently only Inline is supported.
	// +kubebuilder:validation:Enum=Inline
	// +kubebuilder:default=Inline
	source: #ScriptSource @go(Source)

	// Script specifies an inline script
	// +optional
	script?: string @go(Script)

	// TTL is a duration string which, when set, will cause the function to set the TTL
	// for reconciliation to be the specified value. Defaults to 1m.
	// +optional
	ttl?: string @go(TTL)

	// Debug prints inputs to and outputs of the cue script for all XRs.
	// Inputs are pre-processed to remove typically irrelevant information like
	// the last applied kubectl annotation, managed fields etc.
	// Objects are displayed in compact cue format. (the equivalent of `cue fmt -s`)
	// When false, individual XRs can still be debugged by annotation them with
	//    crossplane-function-cue/debug: "true"
	// +optional
	debug?: bool @go(Debug)

	// DebugNew controls whether a new XR that is being processed by the function
	// has debug output. A "new" XR is determined by the request having only an
	// observed composite but no other observed resources. This allows debug output for
	// first-time reconciles of XRs when the user has not yet had the opportunity to
	// annotate them.
	// +optional
	debugNew?: bool @go(DebugNew)

	// DebugRaw disables the pre-processing of inputs.
	// +optional
	debugRaw?: bool @go(DebugRaw)

	// DebugScript displays the full generated script that is executed.
	// +optional
	debugScript?: bool @go(DebugScript)
}

// CueFunctionParams can be used to provide input to the cue function runner.
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:resource:categories=crossplane
#CueFunctionParams: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec is the input spec for the function.
	spec: #CueInputSpec @go(Spec)
}
