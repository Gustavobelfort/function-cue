package scripts

// generated by fn-cue-tools, DO NOT EDIT
s3bucket: "package s3bucket\n\nimport (\n\t\"list\"\n\t\"encoding/json\"\n)\n\nlet endpoints0 = [\n\tfor s in suffixes {\n\t\tlet bucketName_1 = \"bucket\\(s)\"\n\t\t[\n\t\t\tif #request.observed.resources[bucketName_1].resource.status.atProvider.bucketRegionalDomainName != _|_ // explicit error (_|_ literal) in source\n\t\t\t{\n\t\t\t\t#request.observed.resources[bucketName_1].resource.status.atProvider.bucketRegionalDomainName\n\t\t\t}, \"unknown\"][0]\n\t}]\nlet endpoints1 = [for e in endpoints0 if e != \"unknown\" {\n\te\n}]\nlet mainARN = #request.observed.resources.main.resource.status.atProvider.arn\nlet baseARN = [\n\tif mainARN != _|_ // explicit error (_|_ literal) in source\n\t{\n\t\tmainARN\n\t}, \"unknown\"][0]\nlet arns = [\n\tfor s in suffixes {\n\t\tlet bucketName_2 = \"bucket\\(s)\"\n\t\tlet arn_1 = #request.observed.resources[bucketName_2].resource.status.atProvider.arn\n\t\t[\n\t\t\tif arn_1 != _|_ // explicit error (_|_ literal) in source\n\t\t\t{\n\t\t\t\tarn_1\n\t\t\t}, \"unknown\"][0]\n\t}]\nlet additionalARNs = [for e in arns if e != \"unknown\" {\n\te\n}]\nlet p = #request.observed.resources.main.resource.status.atProvider.bucketRegionalDomainName\n{\n\tresponse: desired: resources: {\n\t\tlet S = spec\n\t\tfor s in suffixes {\n\t\t\tlet bucketName = \"bucket\\(s)\"\n\t\t\t(bucketName): resource: {\n\t\t\t\tapiVersion: \"s3.aws.upbound.io/v1beta1\"\n\t\t\t\tkind:       \"Bucket\"\n\t\t\t\tmetadata: name: \"\\(compName)\\(s)\"\n\t\t\t\tspec: forProvider: {\n\t\t\t\t\tforceDestroy: true\n\t\t\t\t\tregion:       S.parameters.region\n\t\t\t\t\ttags:         tagValues\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// only render additional endpoints if all of them are available since it is an ordered list\n\t// that matches the suffix list\n\tif len(endpoints1) == len(suffixes) \u0026\u0026 len(suffixes) \u003e 0 {\n\t\tresponse: desired: composite: resource: status: additionalEndpoints: endpoints1\n\t}\n}\n{\n\t// if we have a base ARN, render a policy with that and any additional ARNs available.\n\tif baseARN != \"unknown\" {\n\t\tlet allTuples = list.Concat([[baseARN, baseARN + \"/*\"], [\n\t\t\tfor a in additionalARNs {\n\t\t\t\t[a, a + \"/*\"]\n\t\t\t}]])\n\t\tlet allResources = list.FlattenN(allTuples, 1)\n\t\tresponse: desired: resources: iam_policy: resource: {\n\t\t\tapiVersion: \"iam.aws.upbound.io/v1beta1\"\n\t\t\tkind:       \"Policy\"\n\t\t\tmetadata: name: \"\\(compName)-access-policy\"\n\t\t\tspec: forProvider: {\n\t\t\t\tpath: \"/\"\n\t\t\t\tpolicy: json.Marshal({\n\t\t\t\t\tVersion: \"2012-10-17\"\n\t\t\t\t\tStatement: [{\n\t\t\t\t\t\tSid: \"S3BucketAccess\"\n\t\t\t\t\t\tAction: [\"s3:GetObject\", \"s3:PutObject\"]\n\t\t\t\t\t\tEffect:   \"Allow\"\n\t\t\t\t\t\tResource: allResources\n\t\t\t\t\t}]\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\t{\n\t\tlet policyARN = #request.observed.resources.iam_policy.resource.status.atProvider.arn\n\t\tif policyARN != _|_ // explicit error (_|_ literal) in source\n\t\t{\n\t\t\tresponse: desired: composite: resource: status: iamPolicyARN: policyARN\n\t\t}\n\t}\n}\n{\n\tif p != _|_ // explicit error (_|_ literal) in source\n\t{\n\t\tresponse: desired: composite: resource: status: primaryEndpoint: p\n\t}\n}\n\n// responses should be generated based on the request object. The variable below declares it as an open struct\n// so that it can be referenced in expressions.\n#request: {\n\t...\n}\n\n// create some fields for easy access to nested JSON paths and provide defaults\ncomposite: #request.observed.composite.resource\ncompName:  composite.metadata.name\nspec:      composite.spec\ntagValues: [\n\t\tif composite.spec.parameters.tags != _|_ // explicit error (_|_ literal) in source\n\t\t{\n\t\tcomposite.spec.parameters.tags\n\t}, {}][0]\nresponse: desired: resources: main: resource: {\n\tapiVersion: \"s3.aws.upbound.io/v1beta1\"\n\tkind:       \"Bucket\"\n\tmetadata: name: compName\n\tspec: forProvider: {\n\t\tforceDestroy: true\n\t\tregion:       composite.spec.parameters.region\n\t\ttags:         tagValues\n\t}\n}\nsuffixes: [\n\t\tif spec.parameters.additionalSuffixes != _|_ // explicit error (_|_ literal) in source\n\t\t{\n\t\tspec.parameters.additionalSuffixes\n\t}, []][0]\n"
