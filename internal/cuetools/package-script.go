// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package cuetools

import (
	"bytes"
	"encoding/json"
	"fmt"

	"cuelang.org/go/cmd/cue/cmd"
	"github.com/pkg/errors"
)

const generator = "xp-function-cue"

// runDefCommand runs the equivalent of `cue def` using the cue command library instead of forking a cue process.
// The semantics of doing this are iffy at best - it is generally unsafe to do this more than once in a single process
// because of the state of cobra flags that is not cleared correctly across invocations.
func runDefCommand(dir string) (_ []byte, finalErr error) {
	command, err := cmd.New([]string{"def", "--inline-imports", dir})
	if err != nil {
		return nil, errors.Wrap(err, "create def command")
	}
	var buf bytes.Buffer
	command.SetOut(&buf)
	defer func() {
		if r := recover(); r != nil {
			finalErr = fmt.Errorf("cue def: %s", buf.String())
		}
	}()
	if err := command.Execute(); err != nil {
		return nil, errors.Wrap(err, "execute def command")
	}
	return buf.Bytes(), nil
}

type OutputFormat string

const (
	FormatRaw OutputFormat = "raw"
	FormatCue OutputFormat = "cue"
)

type PackageScriptOpts struct {
	Format        OutputFormat // output format
	OutputPackage string       // package to declare for cue output
	VarName       string       // variable name to use for cue output, default _script
}

// PackageScript generates self-contained definitions from the supplied directory and returns cue code for an object
// with a _script property that contains the code as a string. The returned object has a package declaration
// for the package supplied.
func PackageScript(dir string, opts PackageScriptOpts) (_ []byte, finalErr error) {
	defs, err := runDefCommand(dir)
	if err != nil {
		return nil, err
	}

	if opts.Format == FormatRaw {
		return defs, nil
	}

	header := ""
	if opts.OutputPackage != "" {
		header = "package " + opts.OutputPackage
	}
	jsonString, _ := json.Marshal(string(defs))

	varName := opts.VarName
	if varName == "" {
		varName = "_script"
	}
	outputCode := fmt.Sprintf(`%s

// generated by %s, DO NOT EDIT
%s: %s
`, header, generator, varName, jsonString)
	return []byte(outputCode), nil
}
